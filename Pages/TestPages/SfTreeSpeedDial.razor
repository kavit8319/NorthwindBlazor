@page "/sfTreeGreedSpeedDial"
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Grids
@using System.ComponentModel.DataAnnotations;
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfTreeGrid DataSource="@TreeGridData" ID="grdiDate" IdMapping="TaskID" ParentIdMapping="ParentID" Height="312" TreeColumnIndex="1" AllowPaging="true">
                <TreeGridPageSettings PageSizes="@PageSizes" PageSizeMode="PageSizeMode.All" PageCount="5" PageSize="2"></TreeGridPageSettings>
                <TreeGridColumns>
                    <TreeGridColumn Field="TaskID" HeaderText="Task ID" Width="80" IsPrimaryKey="true" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="170">
                        <Template>
                            @{
                                var cont = context as SelfReferenceData;
                                Count++;
                                <SfTooltip @key=@Count Target="#txt" Position="Position.TopRight">
                                    <TooltipTemplates>
                                        <Content>
                                            @cont.TaskName
                                        </Content>
                                    </TooltipTemplates>
                                    <span id="txt">@cont.TaskName</span>
                                </SfTooltip>
                            }
                        </Template>
                    </TreeGridColumn>
                    <TreeGridColumn Field="StartDate" HeaderText="Start Date" Format="d" Type=ColumnType.Date Width="100" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="EndDate" HeaderText="End Date" Format="d" Type=ColumnType.Date Width="100" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Duration" HeaderText="Duration" Width="100" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Progress" HeaderText="Progress" Width="100"></TreeGridColumn>
                    <TreeGridColumn Field="Priority" HeaderText="Priority" Width="100"></TreeGridColumn>
                </TreeGridColumns>
            </SfTreeGrid>
        </div>
    </div>
</div>

<SfSpeedDial OpenIconCss="e-icons e-properties-1" Target="#grdiDate_gridcontrol_content_table"
             Position="FabPosition.BottomRight"
             Direction="LinearDirection.Left" Mode="SpeedDialMode.Radial" IsModal="true">

    <SpeedDialRadialSettings Direction="RadialDirection.AntiClockwise" OffSet="50px"></SpeedDialRadialSettings>

    <SpeedDialItems>

        <SpeedDialItem ID="Add" Title="Add" IconCss="e-icons e-add" />

        <SpeedDialItem ID="Edit" Title="Edit" IconCss="e-icons e-edit" />

        <SpeedDialItem ID="Delete" Title="Delete" IconCss="e-icons e-delete" />

    </SpeedDialItems>

</SfSpeedDial>

@code {

    public int Count { get; set; } = 0;

    private List<SelfReferenceData> TreeGridData { get; set; }

    private List<string> PageSizes { get; set; }

    protected override void OnInitialized()

    {

        this.TreeGridData = SelfReferenceData.GetTree();

        this.PageSizes = new List<string>() { "2", "4", "5", "10", "15", "20", "All" };

    }



    public class SelfReferenceData

    {

        public static List<SelfReferenceData> tree = new List<SelfReferenceData>();

        [Key]

        public int? TaskID { get; set; }

        public string TaskName { get; set; }

        public DateTime? StartDate { get; set; }

        public DateTime? EndDate { get; set; }

        public String Progress { get; set; }

        public String Priority { get; set; }

        public double? Duration { get; set; }

        public int? ParentID { get; set; }

        public bool? IsParent { get; set; }

        public bool? Approved { get; set; }

        public int? ParentItem { get; set; }

        public SelfReferenceData() { }

        public static List<SelfReferenceData> GetTree()

        {

            tree.Clear();

            int root = -1;

            int TaskNameID = 0;

            int ChildCount = -1;

            int SubTaskCount = -1;

            for (var t = 1; t <= 60; t++)

            {

                Random ran = new Random();

                DateTime start = new DateTime(2022, 08, 25);

                DateTime end = new DateTime(2027, 08, 25);

                DateTime startingDate = start.AddDays(t + 2);

                DateTime endingDate = end.AddDays(t + 20);

                string math = (ran.Next() % 3) == 0 ? "High" : (ran.Next() % 2) == 0 ? "Low" : "Critical";

                string progr = (ran.Next() % 3) == 0 ? "Started" : (ran.Next() % 2) == 0 ? "Open" : "In Progress";

                bool appr = (ran.Next() % 3) == 0 ? true : (ran.Next() % 2) == 0 ? false : true;

                root++; TaskNameID++;

                int rootItem = root + 1;

                tree.Add(new SelfReferenceData() { TaskID = rootItem, TaskName = "Parent task " + TaskNameID.ToString(), StartDate = startingDate, EndDate = endingDate, IsParent = true, ParentID = null, Progress = progr, Priority = math, Duration = ran.Next(1, 50), Approved = appr });

                int parent = tree.Count;

                for (var c = 0; c < 2; c++)

                {

                    DateTime start1 = new DateTime(2022, 08, 25);

                    DateTime startingDate1 = start1.AddDays(c + 4);

                    DateTime end1 = new DateTime(2025, 06, 16);

                    DateTime endingDate1 = end1.AddDays(c + 15);

                    root++; ChildCount++;

                    string val = ((parent + c + 1) % 3 == 0) ? "Low" : "Critical";

                    int parn = parent + c + 1;

                    progr = (ran.Next() % 3) == 0 ? "In Progress" : (ran.Next() % 2) == 0 ? "Open" : "Validated";

                    appr = (ran.Next() % 3) == 0 ? true : (ran.Next() % 2) == 0 ? false : true;

                    int iD = root + 1;

                    tree.Add(new SelfReferenceData() { TaskID = iD, TaskName = "Child task " + (ChildCount + 1).ToString(), StartDate = startingDate1, EndDate = endingDate1, IsParent = (((parent + c + 1) % 3) == 0), ParentID = rootItem, Progress = progr, Priority = val, Duration = ran.Next(1, 50), Approved = appr });

                    if ((((parent + c + 1) % 3) == 0))

                    {

                        int immParent = tree.Count;

                        for (var s = 0; s < 3; s++)

                        {

                            DateTime start2 = new DateTime(2022, 08, 25);

                            DateTime startingDate2 = start2.AddDays(s + 4);

                            DateTime end2 = new DateTime(2024, 06, 16);

                            DateTime endingDate2 = end2.AddDays(s + 13);

                            root++; SubTaskCount++;

                            string Prior = (immParent % 2 == 0) ? "Validated" : "Normal";

                            tree.Add(new SelfReferenceData() { TaskID = root + 1, TaskName = "Sub task " + (SubTaskCount + 1).ToString(), StartDate = startingDate2, EndDate = endingDate2, IsParent = false, ParentID = iD, Progress = (immParent % 2 == 0) ? "In Progress" : "Closed", Priority = Prior, Duration = ran.Next(1, 50), Approved = appr });

                        }

                    }

                }

            }

            return tree;

        }

    }

}

